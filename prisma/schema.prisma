// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // .env: file:./prisma/dev.db
}

enum DominantFoot {
  L
  R
  B
  N
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model User {
  id                 String       @id @default(cuid())
  phone              String       @unique
  dominantFoot       DominantFoot @default(N)
  positions          Json
  positionLevels     Json?
  availability       Json?
  preferredFormation String?
  level              Int          @default(5)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  invitesSent        Invite[]     @relation("InviteFromUser")
  invitesReceived    Invite[]     @relation("InviteToUser")

  Message      Message[]
  Match        Match[]
  discoverable Boolean   @default(true)
  lat          Float?
  lng          Float?
  city         String?
  district     String?

  @@index([lat, lng])
}

model Invite {
  id String @id @default(cuid())

  // relations
  matchId String
  match   Match  @relation("MatchInvites", fields: [matchId], references: [id], onDelete: Cascade)

  fromId String
  from   User   @relation("InviteFromUser", fields: [fromId], references: [id], onDelete: Cascade)

  toId String
  to   User   @relation("InviteToUser", fields: [toId], references: [id], onDelete: Cascade)

  // data
  status  InviteStatus @default(PENDING)
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([matchId])
  @@index([fromId])
  @@index([toId])
}

model Message {
  id        String    @id @default(cuid())
  matchId   String
  userId    String
  text      String
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([matchId, createdAt])
}

model Match {
  id       String   @id @default(cuid())
  title    String
  location String?
  level    String   @default("Orta")
  format   String   @default("7v7")
  price    Int?
  time     DateTime @default(now())
  slots    Json     @default("[]")

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  // ðŸ‘‡ iliÅŸki karÅŸÄ± ucu; isim aynÄ± olmalÄ±
  invites Invite[] @relation("MatchInvites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lat       Float?
  lng       Float?
}
