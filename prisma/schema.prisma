// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * ---------------- Enums ----------------
 */
enum DominantFoot {
  L
  R
  B
  N
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}

enum AccessStatus {
  PENDING
  APPROVED
  DECLINED
}

enum MatchStatus {
  DRAFT
  OPEN
  CLOSED
}

enum TeamRole {
  OWNER
  ADMIN
  PLAYER
}

enum TeamVisibility {
  PUBLIC
  PRIVATE
}

/**
 * ---------------- Modeller ----------------
 */

model User {
  id                 String       @id @default(cuid())
  phone              String       @unique
  dominantFoot       DominantFoot @default(N)
  positions          Json
  positionLevels     Json?
  availability       Json?
  preferredFormation String?
  level              Int          @default(5)

  // keşif
  lat          Float?
  lng          Float?
  discoverable Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ratings
  ratingsGiven    Rating[] @relation("Rater")
  ratingsReceived Rating[] @relation("Rated")

  behaviorRollup BehaviorRollup?

  posRatingsGiven    PositionRating[] @relation("PosRater")
  posRatingsReceived PositionRating[] @relation("PosRated")

  // Arkadaşlık
  sentFriendRequests     FriendRequest[] @relation("FriendRequestFrom")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestTo")

  userFriends Friendship[] @relation("UserFriends")
  friendsOf   Friendship[] @relation("UserFriendsOf")

  // Back-relations (mevcut)
  Message Message[] // -> Message.user
  Match   Match[] // -> Match.owner

  // Davetler (maç)
  invitesSent     MatchInvite[] @relation("InviteFromUser")
  invitesReceived MatchInvite[] @relation("InviteToUser")

  // Erişim isteği: bu kullanıcının açtıkları
  accessRequestsSent MatchAccessRequest[] @relation("AccessRequestsFromUser")

  // -------- Takım ilişkileri (YENİ back-relations) --------
  teamsOwned        Team[]             @relation("TeamsOwner") // Team.owner
  teamMemberships   TeamMember[] // TeamMember.user
  teamChatMessages  TeamChatMessage[] // TeamChatMessage.user
  teamPositionSlots TeamPositionSlot[] // TeamPositionSlot.user
  teamJoinRequests  TeamJoinRequest[] // TeamJoinRequest.user

  // Takım Davetleri (TeamInvite back-relations)
  teamInvitesSent     TeamInvite[] @relation("TeamInviteInviter") // TeamInvite.inviter
  teamInvitesReceived TeamInvite[] @relation("TeamInviteToUser") // TeamInvite.toUser

  // -------- Seri (tekrarlayan maç) ilişkileri (YENİ) --------
  seriesOwned              MatchSeries[] // -> MatchSeries.owner
  seriesMemberships        SeriesMember[] // -> SeriesMember.user
  seriesMembershipRequests SeriesMembershipRequest[] // -> SeriesMembershipRequest.requester

  // Haftalık yoklama (RSVP) (YENİ)
  attendances MatchAttendance[] // -> MatchAttendance.user

  @@index([lat, lng])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  from User @relation("FriendRequestFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   User @relation("FriendRequestTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
  @@index([toId])
  @@index([fromId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("UserFriendsOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([friendId])
  @@index([userId])
}

model Message {
  id      String @id @default(cuid())
  matchId String
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  text    String

  deleted   Boolean   @default(false)
  editedAt  DateTime?
  updatedAt DateTime  @updatedAt

  createdAt DateTime @default(now())
}

model MatchAccessRequest {
  id          String       @id @default(cuid())
  matchId     String
  requesterId String
  status      AccessStatus @default(PENDING)
  message     String?
  createdAt   DateTime     @default(now())
  respondedAt DateTime?

  // Karşı alanlarla relation isimlerini eşleştir
  match     Match @relation("MatchAccessRequests", fields: [matchId], references: [id], onDelete: Cascade)
  requester User  @relation("AccessRequestsFromUser", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([matchId, requesterId], map: "uniq_access_req")
  @@index([matchId])
  @@index([requesterId])
}

model Match {
  id       String   @id @default(cuid())
  title    String
  location String?
  level    String   @default("Orta")
  format   String   @default("7v7")
  price    Int?
  time     DateTime @default(now())
  slots    Json     @default("[]")
  ownerId  String?
  owner    User?    @relation(fields: [ownerId], references: [id])
  listed   Boolean  @default(false)

  // Seri ile ilişki (YENİ)
  seriesId String?
  series   MatchSeries? @relation(fields: [seriesId], references: [id])

  status   MatchStatus @default(OPEN)
  closedAt DateTime?

  ratings Rating[]

  inviteOnly Boolean @default(false)

  // back-relations
  invites    MatchInvite[]
  messages   Message[]
  posRatings PositionRating[]

  // Erişim istekleri (karşı: MatchAccessRequest.match)
  accessRequests MatchAccessRequest[] @relation("MatchAccessRequests")

  // Haftalık yoklama (RSVP) back-relation (YENİ)
  attendances MatchAttendance[] // -> MatchAttendance.match

  // Takımlar (nötr – home/away yok)
  teamAId String?
  teamBId String?
  teamA   Team?   @relation("MatchTeamA", fields: [teamAId], references: [id])
  teamB   Team?   @relation("MatchTeamB", fields: [teamBId], references: [id])

  // ELO geçmişi back-relation (YENİ)
  teamEloHistory TeamEloHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamAId])
  @@index([teamBId])
  @@index([seriesId])
}

model MatchInvite {
  id          String       @id @default(cuid())
  matchId     String
  fromUserId  String
  toUserId    String?
  toPhone     String?
  message     String?
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime?
  respondedAt DateTime?
  createdAt   DateTime     @default(now())

  match    Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  fromUser User  @relation("InviteFromUser", fields: [fromUserId], references: [id])
  toUser   User? @relation("InviteToUser", fields: [toUserId], references: [id])

  @@index([matchId])
  @@index([toUserId])
  @@index([toPhone])
}

model Rating {
  id      String @id @default(cuid())
  matchId String
  raterId String
  ratedId String

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  rater User  @relation("Rater", fields: [raterId], references: [id], onDelete: Cascade)
  rated User  @relation("Rated", fields: [ratedId], references: [id], onDelete: Cascade)

  traits    Json
  weight    Float     @default(1.0)
  editCount Int       @default(1)
  lockedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([matchId, raterId, ratedId])
  @@index([ratedId])
  @@index([raterId])
  @@index([matchId])
}

model BehaviorRollup {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  samples    Int      @default(0)
  punctual   Float    @default(0)
  respect    Float    @default(0)
  sports     Float    @default(0)
  swearing   Float    @default(0)
  aggression Float    @default(0)
  wsum       Float    @default(0)
  si         Float    @default(0)
  updatedAt  DateTime @updatedAt
}

model PositionRating {
  id      String @id @default(cuid())
  matchId String
  raterId String
  rateeId String
  pos     String // 'GK','LB','CB',...
  score   Float // 1..10
  weight  Float  @default(1.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  rater User  @relation("PosRater", fields: [raterId], references: [id], onDelete: Cascade)
  ratee User  @relation("PosRated", fields: [rateeId], references: [id], onDelete: Cascade)

  @@unique([matchId, raterId, rateeId, pos])
  @@index([rateeId, pos])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String // 'access_approved' | 'rating_reminder' | ...
  matchId   String?
  data      Json?
  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@unique([userId, type, matchId]) // aynı kullanıcı+tip+maç için tekrarı engelle
  @@index([userId, readAt])
  @@index([userId, type])
}

/**
 * ==================== SERİ (TEKRARLAYAN) – YENİ ====================
 */

model MatchSeries {
  id              String    @id @default(cuid())
  ownerId         String
  title           String
  location        String?
  format          String    @default("7v7")
  price           Int?
  dayOfWeek       Int // 1..7 (Mon..Sun) (Pazar=7)
  timeHHmm        String // "10:00"
  tz              String    @default("Europe/Istanbul")
  startDate       DateTime
  endDate         DateTime?
  inviteOnly      Boolean   @default(true)
  reservesPerTeam Int       @default(2)

  // ilişkiler
  owner    User                      @relation(fields: [ownerId], references: [id])
  members  SeriesMember[]
  matches  Match[]
  requests SeriesMembershipRequest[] // <- back relation eklendi

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeriesMember {
  id        String   @id @default(cuid())
  seriesId  String
  userId    String
  pos       String // "GK","LB",... (sabit mevki)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  series MatchSeries @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id])

  @@unique([seriesId, userId])
  @@index([userId])
}

model SeriesMembershipRequest {
  id          String       @id @default(cuid())
  seriesId    String
  requesterId String
  status      AccessStatus @default(PENDING)
  message     String?
  createdAt   DateTime     @default(now())
  respondedAt DateTime?

  series    MatchSeries @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  requester User        @relation(fields: [requesterId], references: [id])

  @@unique([seriesId, requesterId])
  @@index([seriesId])
  @@index([requesterId])
}

model MatchAttendance {
  id        String   @id @default(cuid())
  matchId   String
  userId    String
  status    String // 'GOING' | 'NOT_GOING'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([matchId, userId])
  @@index([userId])
}

// ---------------- TAKIM ----------------

model Team {
  id           String         @id @default(cuid())
  name         String
  ownerId      String
  bio          String?
  city         String?
  district     String?
  logoUrl      String?
  visibility   TeamVisibility @default(PUBLIC)
  discoverable Boolean        @default(true)

  // Kuşbakışı sahada varsayılan formasyon
  formationCode String @default("4-3-3") // "4-3-3" | "3-5-2" | "4-2-3-1"

  // Özet metrikler
  avgLevel         Float? // 1–10 arası ortalama
  avgSportsmanship Float? // 1–10 arası ortalama
  elo              Int    @default(1000)

  // İlişkiler
  members       TeamMember[]
  invites       TeamInvite[]
  chatMessages  TeamChatMessage[]
  positionSlots TeamPositionSlot[]
  joinRequests  TeamJoinRequest[]
  eloHistory    TeamEloHistory[]

  // Maç ve ilan back-relations (YENİ)
  matchesAsTeamA     Match[]            @relation("MatchTeamA")
  matchesAsTeamB     Match[]            @relation("MatchTeamB")
  requestsOpened     TeamMatchRequest[] @relation("ReqTeam")
  requestsAsOpponent TeamMatchRequest[] @relation("OppTeam")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // owner (isimli relation)
  owner User @relation("TeamsOwner", fields: [ownerId], references: [id])

  @@index([ownerId])
}

// Üyelik
model TeamMember {
  teamId            String
  userId            String
  role              TeamRole @default(PLAYER)
  status            String   @default("ACTIVE") // ACTIVE | INVITED | LEFT | BANNED
  number            Int?
  preferredPosition String? // GK/LB/...
  currentSlotKey    String? // sahadaki slot anahtarı (CB1 gibi)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@index([userId])
}

// Uygulama içi/dışı davet
model TeamInvite {
  id          String    @id @default(cuid())
  teamId      String
  invitedBy   String
  toUserId    String?
  toPhone     String?
  status      String    @default("PENDING") // PENDING|ACCEPTED|REJECTED|EXPIRED|CANCELLED
  message     String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  respondedAt DateTime?

  team    Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter User  @relation("TeamInviteInviter", fields: [invitedBy], references: [id])
  toUser  User? @relation("TeamInviteToUser", fields: [toUserId], references: [id])

  @@index([teamId])
  @@index([toUserId])
  @@index([toPhone])
}

// Takım sohbeti
model TeamChatMessage {
  id        String    @id @default(cuid())
  teamId    String
  userId    String
  text      String
  editedAt  DateTime?
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([teamId, createdAt])
}

// Formasyon slotları (kuşbakışı yerleşim)
model TeamPositionSlot {
  id            String  @id @default(cuid())
  teamId        String
  formationCode String // ör. "4-3-3"
  slotKey       String // GK | LB | CB1 | CB2 | ...
  x             Int // 0–100
  y             Int // 0–100
  userId        String? // bu slota yerleşen üye
  locked        Boolean @default(false) // app-dışı arkadaş için rezerve

  team Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  @@unique([teamId, formationCode, slotKey])
  @@index([teamId])
}

// Oyuncunun takıma başvurusu
model TeamJoinRequest {
  id        String    @id @default(cuid())
  teamId    String
  userId    String
  position  String // hedef mevki
  note      String?
  status    String    @default("PENDING") // PENDING|APPROVED|REJECTED|WITHDRAWN
  createdAt DateTime  @default(now())
  decidedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId])
}

// Rakip takım arama ilanı (home/away yok; iki takım adı yeter)
model TeamMatchRequest {
  id               String   @id @default(cuid())
  requestingTeamId String
  opponentTeamId   String?
  // Maç parametreleri
  date             DateTime
  durationMin      Int
  locationText     String
  format           String // 6v6 | 7v7 | 11v11 ...
  levelMin         Float?
  levelMax         Float?
  notes            String?
  status           String   @default("OPEN") // OPEN|MATCHED|CANCELLED|EXPIRED

  createdBy String
  createdAt DateTime @default(now())

  reqTeam Team  @relation("ReqTeam", fields: [requestingTeamId], references: [id])
  oppTeam Team? @relation("OppTeam", fields: [opponentTeamId], references: [id])

  @@index([requestingTeamId])
  @@index([status])
}

// ELO geçmişi
model TeamEloHistory {
  id        String   @id @default(cuid())
  teamId    String
  matchId   String
  delta     Int
  newElo    Int
  createdAt DateTime @default(now())

  team  Team  @relation(fields: [teamId], references: [id])
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([teamId])
}
