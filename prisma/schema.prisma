// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum DominantFoot {
  L
  R
  B
  N
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model User {
  id                 String       @id @default(cuid())
  phone              String       @unique
  dominantFoot       DominantFoot @default(N)
  positions          Json
  positionLevels     Json?
  availability       Json?
  preferredFormation String?
  level              Int          @default(5)

  // keşif için
  lat          Float?
  lng          Float?
  discoverable Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Friend request ilişkileri
  sentFriendRequests     FriendRequest[] @relation("FriendRequestFrom")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestTo")

  // Friendship ilişkileri
  userFriends Friendship[] @relation("UserFriends")
  friendsOf   Friendship[] @relation("UserFriendsOf")

  // Mevcut ilişkilerin
  Message Message[]
  Match   Match[]

  @@index([lat, lng])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  message   String? // <— BUNU İSTİYORUZ
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  from User @relation("FriendRequestFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   User @relation("FriendRequestTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
  @@index([toId])
  @@index([fromId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("UserFriendsOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([friendId])
  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  matchId   String
  userId    String
  text      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([matchId, createdAt])
}

model Match {
  id       String   @id @default(cuid())
  title    String
  location String?
  level    String   @default("Orta")
  format   String   @default("7v7")
  price    Int?
  time     DateTime @default(now())
  slots    Json     @default("[]")
  ownerId  String?
  owner    User?    @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
